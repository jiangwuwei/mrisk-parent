<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zoom.risk.operating.ruleconfig.dao.PolicyMapper">
  <resultMap id="BaseResultMap" type="com.zoom.risk.operating.ruleconfig.model.Policy">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="scene_no" jdbcType="VARCHAR" property="sceneNo" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="policy_pattern" jdbcType="TINYINT" property="policyPattern" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="weight_value" jdbcType="INTEGER" property="weightValue" />
    <result column="weight_grade" jdbcType="VARCHAR" property="weightGrade" />
    <result column="policy_no" jdbcType="VARCHAR" property="policyNo" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="created_date" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="modified_date" jdbcType="TIMESTAMP" property="modifiedDate" />
  </resultMap>
  <sql id="Base_Column_List">
    id, scene_no, name, policy_pattern, status, weight_value, weight_grade, policy_no, description, 
    created_date, modified_date
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from zoom_policy
    where id = #{id,jdbcType=BIGINT}
      AND
      status != 3
  </select>
  <select id="selectCountBySceneNo" parameterType="map" resultType="java.lang.Integer">
  	select count(1)
  	from zoom_policy
  	where 
  		scene_no = #{sceneNo, jdbcType=VARCHAR}
  		AND
  		status != 3
  </select>
  <select id="selectBySceneNoList" parameterType="list" resultMap="BaseResultMap">
	select 
		<include refid="Base_Column_List"/> 
	from zoom_policy
	where 
		scene_no in (
	<foreach item="item" index="index" collection="list"
		separator="," >
		"${item}"
	</foreach>)
    AND
    status != 3
  </select>
    <select id="selectBySceneNo" parameterType="string" resultMap="BaseResultMap">
	select 
		<include refid="Base_Column_List"/> 
	from zoom_policy
	where 
		scene_no = #{sceneNo, jdbcType=VARCHAR }
      AND
      status = 2
  </select>
   <select id="exists" parameterType="map" resultType="java.lang.Integer">
  	select count(1)
  	from zoom_policy
  	where 
  		scene_no = #{sceneNo, jdbcType=VARCHAR}
  		and id != #{policyId, jdbcType=BIGINT}
  		and (
  			weight_value = #{weightValue, jdbcType=INTEGER}
  			or
  			name = #{policyName, jdbcType=VARCHAR}
  		)
  		AND status != 3
  </select>
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from zoom_policy
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.zoom.risk.operating.ruleconfig.model.Policy" useGeneratedKeys="true" keyProperty="id">
    insert into zoom_policy (id, scene_no, name,
      policy_pattern, status, weight_value, policy_no, 
      weight_grade, description)
    values (#{id,jdbcType=BIGINT}, #{sceneNo,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{policyPattern,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}, #{weightValue,jdbcType=INTEGER}, 
      #{policyNo,jdbcType=VARCHAR}, #{weightGrade,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zoom.risk.operating.ruleconfig.model.Policy">
    insert into zoom_policy
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="sceneNo != null">
        scene_no,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="policyPattern != null">
        policy_pattern,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="weightValue != null">
        weight_value,
      </if>
      <if test="weightGrade != null">
        weight_grade,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="createdDate != null">
        created_date,
      </if>
      <if test="modifiedDate != null">
        modified_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="sceneNo != null">
        #{sceneNo,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="policyPattern != null">
        #{policyPattern,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="weightValue != null">
        #{weightValue,jdbcType=INTEGER},
      </if>
      <if test="weightGrade != null">
        #{weightGrade,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null">
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedDate != null">
        #{modifiedDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zoom.risk.operating.ruleconfig.model.Policy">
    update zoom_policy
    <set>
      <if test="sceneNo != null">
        scene_no = #{sceneNo,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="policyPattern != null">
        policy_pattern = #{policyPattern,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="weightValue != null">
        weight_value = #{weightValue,jdbcType=INTEGER},
      </if>
      <if test="weightGrade != null">
        weight_grade = #{weightGrade,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      modified_date = now(),
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zoom.risk.operating.ruleconfig.model.Policy">
    update zoom_policy
    set
      name= #{name,jdbcType=VARCHAR},
      scene_no = #{sceneNo,jdbcType=VARCHAR},
      policy_pattern = #{policyPattern,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT},
      weight_value = #{weightValue,jdbcType=INTEGER},
      weight_grade = #{weightGrade,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
   	  modified_date = now()
    where id = #{id,jdbcType=BIGINT}
  </update>
  
   <update id="updateStatus" parameterType="map">
		update zoom_policy
		set status=#{status}
		where
			id = #{policyId,jdbcType=BIGINT}
	</update>
	
	
</mapper>